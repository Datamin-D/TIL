# 1. numpy 조건식--> np.where()
  # np.where(조건, 참일 때, 거짓일 때) : 조건을 만족할 때 반환할 값을 지정한다.
  # np.where(조건) : 조건을 만족하는 값의 인덱스를 반환한다. 
#예제 ndarray에서 음수가 나오면 0으로 값 바꾸기
np.where(x < 0 , 0 ,x) # 여기서 x는 변수 x의 각 원소. 참일때, 거짓일 때 값 다 줘야함. np.where(x<0,참일때 0반환, 거짓이면 x그대로 반환.)

#2. numpy.random.3가지
np.random.randint(6) # 0~5까지 랜덤한 int하나
np.random.rnadint(2,6) # 2~5까지 랜덤 int하나

np.random.rand(m,n) #0~1 균일 분포. 표준정규분포 난수를 생성.
np.random.rand(6)
np.random.rand(3,2)

np.random.randn(6)
np.random.randn(2,3)

# + np.random.uniform #균등 분포로부터 무작위 표본 추출
#np.random.uniform(low=0.0, high=10.0, size=100)

#3. matmul,dot
np.dot은 내적.
np.matmul은 행렬곱

#4. np.repeat(~를,~번만큼,axis = 0,1 방향으로 복제) array복제
x = np.random.rand(1,8)
y = np.repeat(x,7,axis = 0)

#5. np.sum(연산할놈, axis = 0,1방향으로. ,keepdims = True,False) # keepdims하면sum하면서도 dimension이 바뀌지 않음.

#6. 깊은복사, 얕은복사
#파이썬에서 얕은 복사는 그냥 할당. b = a 그런데 
import copy 
b = copy.deepcopy(a) #이런식이면 깊은복사됨. a,b id다름.

#그런데! 변수 할당, 슬라이싱해서 할당하는건 얕은 복사에 해당됨.
a = [1,2,3]
b = a
#위에서 a,b id는 다름.
#하지만 배열, 리스트 원소 id는 같음 따라서아래와 같이 나타남.

>>> a = [[1,2], [3,4]]
>>> b = a[:]
>>> id(a)
4395624328
>>> id(b)
4396179592 #a와 id 다름
>>> id(a[0])
4396116040
>>> id(b[0])
4396116040 #a의 원소와는 id 같음.
#--> 깊은복사하면 해결됨
