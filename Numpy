# 1. numpy 조건식--> np.where()
  # np.where(조건, 참일 때, 거짓일 때) : 조건을 만족할 때 반환할 값을 지정한다.
  # np.where(조건) : 조건을 만족하는 값의 인덱스를 반환한다. 
#예제 ndarray에서 음수가 나오면 0으로 값 바꾸기
np.where(x < 0 , 0 ,x) # 여기서 x는 변수 x의 각 원소. 참일때, 거짓일 때 값 다 줘야함. np.where(x<0,참일때 0반환, 거짓이면 x그대로 반환.)

#2. numpy.random. 숫자뽑기3가지
np.random.randint(6) # 0~5까지 랜덤한 int하나
np.random.rnadint(2,6) # 2~5까지 랜덤 int하나

np.random.rand(m,n) #0~1 균일 분포. 표준정규분포 난수를 생성.
np.random.rand(6)
np.random.rand(3,2)

np.random.randn(6)
np.random.randn(2,3)

# + np.random.uniform #균등 분포로부터 무작위 표본 추출
#np.random.uniform(low=0.0, high=10.0, size=100)

# + np.random.choice(리스트 등) :
a = ['라면','볶음밥','고구마']
np.random.choice(a) 

 #np.random.choice(숫자도 가능, size = 몇개 뽑을지, replace = True면 복원추출, p = [0.1,0.2,0.8,0.1]같은 확률 분포)
 np.random.choice(10,3) #[0,1,2,....,9] 중에서 3개 추출됨.
 
 
#3. matmul,dot
np.dot은 내적.
np.matmul은 행렬곱

#4. np.repeat(~를,~번만큼,axis = 0,1 방향으로 복제) array복제
x = np.random.rand(1,8)
y = np.repeat(x,7,axis = 0)


    

#5. np.sum(연산할놈, axis = 0,1방향으로. ,keepdims = True,False) # keepdims하면sum하면서도 dimension이 바뀌지 않음.

# np.sum에대한 새로운 해석
a.shape --> (X,Y,Z)
np.sum(a, axis = 1)이면 1번째 축이 사라짐.--> (X,Z)
np.sum(a, axis = 0)이면 0번째 축이 사라짐.--> (Y,Z)

#6. 깊은복사, 얕은복사
#파이썬에서 얕은 복사는 그냥 할당. b = a 그런데 
import copy 
b = copy.deepcopy(a) #이런식이면 깊은복사됨. a,b id다름.

#그런데! 변수 할당, 슬라이싱해서 할당하는건 얕은 복사에 해당됨.
a = [1,2,3]
b = a
#위에서 a,b id는 다름.
#하지만 배열, 리스트 원소 id는 같음 따라서아래와 같이 나타남.

>>> a = [[1,2], [3,4]]
>>> b = a[:]
>>> id(a)
4395624328
>>> id(b)
4396179592 #a와 id 다름
>>> id(a[0])
4396116040
>>> id(b[0])
4396116040 #a의 원소와는 id 같음.
#--> 깊은복사하면 해결됨

# 7. data 섞기 using np.random.permutation(숫자), np.random.shuffles(변수)
# permutation은 0 ~ 숫자-1 까지 무작위 순서 생성.
# shuffle은 array를 셔플해서 INPLACE를 한다. : array 자체가 변함)

#참고 https://medium.com/@shistory02/numpy-permutation-vs-shuffle-34fe56f0c246

# 8. np.hstack : horizontal하게 합치기. 옆으로.
# np.vstack은 vertical하게 합치기. 수직으로

a = np.array([[4],
          [5],
          [6]])
b  = np.array([[1],
               [2],
               [3]])
a.shape
b.shape

np.hstack((b,a))
>>>

import numpy as np
a = np.array([[4],
          [5],
          [6]])
b  = np.array([[1],
               [2],
               [3]])
a.shape
b.shape

np.hstack((b,a))
>>>
array([[1, 4],
       [2, 5],
       [3, 6]])

np.vstack()
>>>
array([[1],
       [2],
       [3],
       [4],
       [5],
       [6]])


# 9. np.percentile(array_like,백분위)
random = np.random.rand(5)
np.percentile(random, 50)

#10 np.newaxis
# np.newaxis는 np 차원을 늘려줌.
# make it as row vector by inserting an axis along first dimension
In [9]: row_vec = arr[np.newaxis, :]
In [10]: row_vec.shape
Out[10]: (1, 4)

# make it as column vector by inserting an axis along second dimension
# In [11]: col_vec = arr[:, np.newaxis]
# In [12]: col_vec.shape
# Out[12]: (4, 1)
# https://azanewta.tistory.com/3

#11. about axis.
https://webnautes.tistory.com/1392
