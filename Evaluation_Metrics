# 1.For Regression
# R2,adjR2, mae, mse, rmse, rmsle(추가 예정.)
# rmsle는 과소평가된것에 패널티 더 줌.
# 
# 

# RMLSLE도 추가한 버젼
from sklearn.metrics import make_scorer

# r2 sklearn꺼로 수정해서 다시 구현, mape sklearn꺼는 안됨. 없음. --> 수정, r2 squared 추가

def metrics(model,x_train,y_train,x_test,y_test,train_pred,test_pred):
  # R square
  # print("train set score(R square):",np.round(model.score(x_train,y_train),2))
  # print("test set score(R square):",np.round(model.score(x_test,y_test),2),"\n")
  r2_train = np.round(r2_score(y_train, train_pred),2)
  r2_test = np.round(r2_score(y_test, test_pred),2)

  print("train set score(R square):",r2_train)
  print("test set score(R square):",r2_test,"\n")

  def adjusted_r_squared(X, Y, r2):
      '''
      Returns a computed Adjusted R-Squared Coefficient.
      
      Parameters
      ----------
      X : Pandas DataFrame
          A pandas DataFrame including all the independant variables. Could be a series if there is only one predictor.
          
      Y : Pandas DataFrame or Series
          Labels or response variables 'Y'.
          
      r2 : float
          R-Squared Coefficient
      '''
      n = len(Y)
      p = X.shape[1]
      adj_r = 1 - ((1 - r2) * (n - 1)) / (n - p - 1)

      return adj_r
  print("train set score(adj R square):",np.round(adjusted_r_squared(x_train, y_train,r2_train),2))
  print("test set score(adj R square):",np.round(adjusted_r_squared(x_test, y_test,r2_test),2),"\n")


  #y_train= np.array(y_train)
  #y_test = np.array(y_train)
  # MAE Mean absolute error --> MSE보다 특이치에 robust 절댓값이라서
  print("train set score(MAE):",np.round(mean_absolute_error(y_train, train_pred),2)) #.sklearnmetrics(y_true, y_pred)
  print("test set score(MAE):",np.round(mean_absolute_error(y_test, test_pred),2),"\n")

  # MSE Mean Squatred Error
  print("train set score(MSE):",np.round(mean_squared_error(y_train,train_pred),2))
  print("test set score(MSE):",np.round((mean_squared_error(y_test,test_pred)),2),"\n")

  # RMSE Root Mean Sqaured Error
  print("train set score(RMSE):",np.round(np.sqrt(mean_squared_error(y_train,train_pred)),2))
  print("test set score(RMSE):",np.round(np.sqrt(mean_squared_error(y_test,test_pred)),2),"\n")

  # MAPE Mean Absolute Percentage Error

  def MAPE(y_true, y_pred): 
      return np.round(np.mean(np.abs((y_true - y_pred) / y_true)) * 100,2)

  print("train set score(MAPE):",MAPE(y_train,train_pred))
  print("test set score(MAPE):",MAPE(y_test,test_pred),"\n")            

  # #MPE Mean Percentage Error --> 제외. 

  # def MPE(y_true, y_pred): 
  #     return np.round(np.mean((y_true - y_pred) / y_true) * 100,2)

  # print("train set score(MPE):", MPE(y_train,train_pred),"%")
  # print("test set score(MPE):", MPE(y_test,test_pred),"%") 



  def rmsle(y_pred, y_test) : 
    assert len(y_test) == len(y_pred)
    return np.sqrt(np.mean((np.log(1+y_pred) - np.log(1+y_test))**2)) 
  print("train set score(RMSLE):",rmsle(train_pred,y_train))
  print("test set score(RMSLE):",rmsle(test_pred, y_test))  

#   #lr.score 코알라 참조 https://book.coalastudy.com/data-science-lv1/week5/stage3
#   #나머진 https://partrita.github.io/posts/regression-error/ 참조
# RMSLE 는 https://www.kaggle.com/marknagelberg/rmsle-function 참조
