#1. map함수 쓰는법
df['column'].map(lambda x: x 에 할 연산)
e.g.
#빈 리스트인지 확인
df['Genre'].map(lambda x : x == "[]") 
하면 series 값 별로 lambda함수를 연산해줌.

#2. DataFrame합치는 pd.concat()
#axis 방향
pd.concat(df1,df2,axis = 1) #옆으로 붙임
pd.concat(df1,df2,axis = 0) #밑에다 붙임.
first argument must be an iterable of pandas objects, you passed an object of type "DataFrame" 이 뜰것. 리스트로 넣어줘야하기 때문.

  #맞는 코드
  pd.concat([df1,df2],axis = 1) #옆으로 붙임
  pd.concat([df1,df2],axis = 0) #밑에다 붙임.

# * pd.concat([],axis = 1)로 합칠 때 합치는 기준은 index임.  
# 물론 pd.concat([df1,df2],ignore_index = True,axis = 1) 옵션을 주면 말그대로 옆으로 그냥 갖다붙임. 그러나 컬럼 이름이 0,1,2,..로 변해버림
# = pd.concat([df_5, df_6], keys=['df_5', 'df_6'], names=['df_name', 'row_number']) 같이 names = 를 통해 컬럼 이름을 주면 됨.



출처: https://rfriend.tistory.com/256 [R, Python 분석과 프로그래밍의 친구 (by R Friend)]


#3. 열 삭제 df.drop()
df.drop(['컬럼1','컬럼2'],axis = 1) #axis 지정안해주면 컬럼 못찾겠다 에러날 수도.  
#이대로 놓는다고 df가 변하지는 않음.
df = df.drop(['컬럼1','컬럼2'],axis = 1) #까지 해줘야 함.

#4. 행삭제
df.drop([행인덱스,행인덱스])

5.행 수 세는법
len(df[df['Label'] == 'Benign']) 이렇게 len으로  특정 컬럼('Label')의 행 갯수 셀 수 있음.

6. 판다스 inplace의 의미
inplace 옵션에 True를 주면 또 다른 객체를 반환하지 않고 기존 객체를 수정 (ex. df.fillna(inplace=True) )
즉, 다시 df = 내가 원한 연산 이런거 안해줘도 됨.
출처: https://sacko.tistory.com/18 [데이터 분석하는 문과생, 싸코]

#7. Df에 새로운 행 추가.
팬더는 완전히 채워진 ‘데이터 프레임’을로드하도록 설계되었습니다.
그치만 append()메소로 사전의 값을 행으로 직접 가져 와서 팬더dataframe에 추가 할 수 있습니다.
df = df.append({'컬럼':값},colimns = [],ignore_index = True)
https://www.delftstack.com/ko/howto/python-pandas/how-to-add-one-row-to-pandas-dataframe/

#8. df에서 index를 새로운 컬럼으로 만들기.
df.reset_index() #하면됨.

#9. def안에서 df를 어쩔 수 없이 할당해야될때.

def scale_log(col_name):
  global df 
  # 밑에 drop을 사용하려면 필연적으로 df = 식 처럼 df에 할당해줘야함. 그런데 그러면 def에서 전역/지역변수 문제 발생.def안에 변수를 할당시키면 지역변수로 생각하기 때문.
  # global 해주면 말끔히 해결.
  
  log_col_name = 'log_' + col_name
  df[log_col_name] = df[col_name].apply(lambda x: np.log(x))
  df = df.drop(col_name, axis = 1) #이거때매그럼.
  return df[log_col_name]

#10. df에 = 으로 할당시 주의점.
df1[['new_col'] = df2['col'] 하면 concat처럼 눈에보이는 순서를 간직하고 붙는게 아닌, index에 맞게 붙음. 따라서 그냥 = 로 할당해주면 안됨.
df1.reset_index() 활용.

#11 pandas sum  #df.sum의 형태.
df.sum() #세로별합
df.sum(axis = 0) # 세로합

df.sum(axis = 1) #가로합
